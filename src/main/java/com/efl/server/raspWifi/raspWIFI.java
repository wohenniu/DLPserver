package com.efl.server.raspWifi;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.springframework.stereotype.Component;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;

@Component
public class raspWIFI {
    private JTextField textField2;
    private JButton 连接Button;
    private JPanel Wifipanel;
    private JPanel Wifipanel1;
    private String WIFI;
    private String password;
    private JComboBox comboBox1;
    private JButton 刷新Button;


    public JPanel getWifipanel() {
        return Wifipanel;
    }

//    public static void main(String[] args) {
//        JFrame frame = new JFrame("raspWIFI");
//        frame.setContentPane(new raspWIFI().Wifipanel);
//        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        frame.pack();
//        frame.setLocationRelativeTo(null);
//        frame.setVisible(true);
//    }

    public raspWIFI() {
        try {
            WIFIListRefresh();
        } catch (InterruptedException e1) {
            e1.printStackTrace();
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        连接Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                WIFI = (String) comboBox1.getSelectedItem();
                password = textField2.getText();
                try {
                    process p2 = new process(WIFI, password);
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        });

        MouseListener popItems = comboBox1.getMouseListeners()[0];   //取出弹出框监听器并记录为popItems对象
        //点击文本区域弹出
        comboBox1.removeMouseListener(popItems);                     //文本区域去除
        //点击倒三角符号弹出
        comboBox1.getComponent(0).removeMouseListener(popItems);  //倒三角符号去除
        刷新Button.addMouseListener(new MouseAdapter() {             //刷新按钮添加监听器
            @Override
            public void mousePressed(MouseEvent e) {
                try {
                    刷新Button.setEnabled(false);
                    WIFIListRefresh();
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
                //System.out.println("this");
            }
        });

        comboBox1.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                popItems.mousePressed(e);
                刷新Button.setEnabled(true);
            }
        });

        comboBox1.getComponent(0).addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                popItems.mousePressed(e);
                刷新Button.setEnabled(true);
            }
        });

     /*   刷新Button.getComponent(0).addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                try {
                    WIFIListRefresh();
                } catch (IOException e1) {
                    e1.printStackTrace();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                }
                popItems.mousePressed(e);
            }
        });*/
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    private void WIFIListRefresh() throws IOException, InterruptedException {
        iwlist iwlist = new iwlist();
        comboBox1.removeAllItems();
        int number = iwlist.getWIFInames().size();
        for (int i = 0; i < number; i++) {
            comboBox1.addItem(iwlist.getWIFInames().get(i));
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Wifipanel = new JPanel();
        Wifipanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        Wifipanel.setMinimumSize(new Dimension(360, 88));
        Wifipanel.setOpaque(false);
        Wifipanel.setPreferredSize(new Dimension(360, 88));
        Wifipanel1 = new JPanel();
        Wifipanel1.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        Wifipanel.add(Wifipanel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("WIFI名称");
        Wifipanel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        刷新Button = new JButton();
        刷新Button.setText("刷新");
        Wifipanel1.add(刷新Button, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(60, 25), new Dimension(60, 25), new Dimension(60, 25), 0, false));
        comboBox1 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        comboBox1.setModel(defaultComboBoxModel1);
        Wifipanel1.add(comboBox1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 30), new Dimension(200, 30), new Dimension(200, 30), 0, false));
        连接Button = new JButton();
        连接Button.setText("连接");
        Wifipanel1.add(连接Button, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(60, 25), new Dimension(60, 25), new Dimension(60, 25), 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("   密  码  ");
        Wifipanel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField2 = new JTextField();
        textField2.setText("");
        Wifipanel1.add(textField2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, 30), new Dimension(150, 30), new Dimension(200, 30), 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Wifipanel;
    }
}
